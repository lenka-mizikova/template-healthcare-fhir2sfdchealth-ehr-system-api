<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:context="http://www.springframework.org/schema/context"
	xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:synchronize="http://www.mulesoft.org/schema/mule/synchronize" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/synchronize http://www.mulesoft.org/schema/mule/synchronize/current/mule-synchronize.xsd">
	
	<context:property-placeholder location="mule.test.properties"/>
    <spring:beans>
        <spring:import resource="classpath:system-api.xml" />
    </spring:beans>
    <scripting:script name="fhirPatientJSON" engine="JavaScript" doc:name="Script"><![CDATA['{  "resourceType": "Patient",  "id": "Patient/1234",  "name": [  {    "use": "official",      "family": [        "Radonctest"      ],      "given": [        "Veera"      ],      "prefix": [        ""      ],      "suffix": [        ""      ]    }  ],  "telecom": [    {      "system": "phone",      "value": "608-999-9654",      "use": "home"    }  ],  "gender": "male",  "birthDate": "1970-02-12",  "address": [    {      "line": [        "1855 Folsom Street"      ],      "city": "San Francisco",      "district": "DANE",      "state": "Wisconsin",      "postalCode": "53703",      "country": "United States of America"    }  ]}']]></scripting:script>
    <scripting:script name="fhirAllergiesJSON" engine="JavaScript" doc:name="Script"><![CDATA['[{"criticality":"CRITH","onset":"<dateTime>","patient":{"reference":"Patient/example"},"recordedDate":"2015-08-28","reporter":{"display":"CHAO, LING","reference":"Practitioner/27166"},"resourceType":"AllergyIntolerance","substance":{"coding":[{"code":"29217","system":"Internal"}],"text":"FENNEL (FOENICULUM VULGARE)"},"type":"allergy"},{"criticality":"CRITH","onset":"<dateTime>","patient":{"reference":"Patient/example"},"recordedDate":"2015-05-11","reporter":{"display":"GOPALAKRISHNAN, VEERARAGAVAN","reference":"Practitioner/22614"},"resourceType":"AllergyIntolerance","substance":{"coding":[{"code":"36824","system":"Internal"}],"text":"PEANUT"},"type":"allergy"},{"criticality":"CRITH","onset":"<dateTime>","patient":{"reference":"Patient/example"},"reaction":[{"description":"Itching","manifestation":{"text":"Itching"}},{"description":"Rash","manifestation":{"text":"Rash"}}],"recordedDate":"2015-05-11","reporter":{"display":"GOPALAKRISHNAN, VEERARAGAVAN","reference":"Practitioner/22614"},"resourceType":"AllergyIntolerance","substance":{"coding":[{"code":"25","system":"Internal"}],"text":"PENICILLINS"},"type":"allergy"},{"criticality":"CRITU","onset":"<dateTime>","patient":{"reference":"Patient/example"},"reaction":[{"description":"Lightheadedness","manifestation":{"text":"Lightheadedness"}}],"recordedDate":"2015-06-17","reporter":{"display":"GOPALAKRISHNAN, VEERARAGAVAN","reference":"Practitioner/22614"},"resourceType":"AllergyIntolerance","substance":{"coding":[{"code":"33302","system":"Internal"}],"text":"ACETAMINOPHEN"},"type":"intolerance"},{"criticality":"CRITU","onset":"<dateTime>","patient":{"reference":"Patient/example"},"reaction":[{"description":"Diarrhea","manifestation":{"text":"Diarrhea"}},{"description":"Delirium","manifestation":{"text":"Delirium"}}],"recordedDate":"2015-06-17","reporter":{"display":"GOPALAKRISHNAN, VEERARAGAVAN","reference":"Practitioner/22614"},"resourceType":"AllergyIntolerance","substance":{"coding":[{"code":"56535","system":"Internal"}],"text":"ANACIN-3 WITH CODEINE"},"type":"allergy"},{"criticality":"CRITU","onset":"<dateTime>","patient":{"reference":"Patient/example"},"reaction":[{"description":"Nausea And Vomiting","manifestation":{"text":"Nausea And Vomiting"}},{"description":"Rash","manifestation":{"text":"Rash"}}],"recordedDate":"2015-05-11","reporter":{"display":"GOPALAKRISHNAN, VEERARAGAVAN","reference":"Practitioner/22614"},"resourceType":"AllergyIntolerance","substance":{"coding":[{"code":"8891","system":"Internal"}],"text":"SHELLFISH DERIVED"},"type":"intolerance"}]']]></scripting:script>
    <scripting:script name="fhirConditionsJSON" engine="JavaScript" doc:name="Script"><![CDATA['[  {    "resourceType": "Condition",    "patient": {      "reference": "Patient/example"    },    "code": {      "coding": [        {          "code": "74400008",          "display": "Appendicitis",          "system": "http://snomed.info/sct"        },        {          "code": "541",          "display": "Appendicitis",          "system": "http://hl7.org/fhir/sid/icd-9-cm"        }      ],      "text": "Appendicitis"    },    "category": {      "coding": [        {          "code": "diagnosis",          "display": "Diagnosis",          "system": "http://hl7.org/fhir/condition-category"        },        {          "code": "439401001",          "display": "Diagnosis",          "system": "http://snomed.info/sct"        }      ]    },    "onsetDateTime": "1996-04-27"  }]']]></scripting:script>
    <scripting:script name="fhirMedicationsJSON" engine="JavaScript" doc:name="Script"><![CDATA['[  {    "resourceType": "MedicationOrder",    "status": "active",    "patient": {      "reference": "patients/mrn/12345"    },    "prescriber": {      "reference": "practitioners/99999",      "display": "PROVIDER, NOT CONFIRMED"    },    "dosageInstruction": [      {        "text": "Take 3 mg by mouth Daily."      },      {        "doseQuantity": {          "value": "3",          "unit": "mg",          "system": "http://unitsofmeasure.org",          "code": "mg"        }      }    ],    "medicationCodeableConcept": {      "coding": [        {          "system": "Internal",          "code": "78064"        },        {          "system": "RxNorm",          "code": "679314"        }      ],      "text": "PALIPERIDONE ER 3 MG TABLET,EXTENDED RELEASE 24 HR"    }  }]']]></scripting:script>
    <scripting:script name="fhirObservationsJSON" engine="JavaScript" doc:name="Script"><![CDATA['[  {    "resourceType": "Observation",    "subject": {      "reference": "Patient/example"    },    "status": "preliminary",    "code": {      "coding": [        {          "system": "Internal",          "code": "86021",          "display": ""        }      ]    },    "comments": "",    "description": "",    "effectiveDateTime": "2015-07-31"  }]']]></scripting:script>
    <scripting:script name="ehrPatient" engine="Groovy" doc:name="Script"><![CDATA[Map patient = new HashMap();

patient.put("Account__c","TestAcc");
patient.put("Id","123");
return patient;]]></scripting:script>

	<scripting:script name="ehrCondition" engine="Groovy" doc:name="Script"><![CDATA[Map condition = new HashMap();

condition.put("Id","456");
return condition;]]></scripting:script>

	<scripting:script name="ehrPractitioner" engine="Groovy" doc:name="Script"><![CDATA[Map practitioner = new HashMap();

practitioner.put("Id","321");
return practitioner;]]></scripting:script>

	<scripting:script name="sfdcResponse" engine="Groovy" doc:name="Script"><![CDATA[Map response = new HashMap();

response.put("Response","success");
return response;]]></scripting:script>
    
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="0.0.0.0" port="${http.port}" basePath="/api" doc:name="HTTP Request Configuration" >
        <http:raml-api-configuration location="healthcare-fhir2sfdchealth-ehr-system-api.raml"/>

    </http:request-config>
    <munit:test name="put:/patients/MRN/123:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [put:/patients/{patientIDType}/{patientID}:system-api-config-200-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock the input JSON">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JSON to Object']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('fhirPatientJSON')]" mimeType="text/json"/>


        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EmrPatient from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EmrPatient from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPatient')]"/>


        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Update EmrPatient'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Update EmrPatient']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('sfdcResponse')]"/>

        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Transform and store payload into fhirPatientData variable' transfomation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform and store payload into fhirPatientData variable']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-payload-equals message="Invalid input data!" expectedValue="#[resultOfScript('fhirPatientJSON')]" doc:name="Assert Payload"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="Flow variable fhirPatientData should not be NULL!" condition="#[flowVars.fhirPatientData != null]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Prepare update of  the EmrPatient in SFDC' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Prepare update of  the EmrPatient in SFDC']"/>
            </mock:with-attributes>

            <mock:assertions-before-call>
                <munit:assert-true message="The EhrPatient Id should not be NULL!" condition="#[payload.Id != null]" doc:name="Assert True"/>
                <munit:assert-true message="The EhrPatient Account__c should not be NULL!" condition="#[payload.Account__c != null]" doc:name="Assert True"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="Payload should contain values which should be inserted into SFDC instance!" condition="#[payload.toString().equals(&quot;{Id=123, Address1City__c=San Francisco, Address1Country__c=United States of America, Address1Line1__c=1855 Folsom Street, Address1Line2__c=, Address1PostalCode__c=53703, Address1State__c=Wisconsin, FamilyName1__c=Radonctest, GenderLabel__c=male, GivenName1__c=Veera, MaritalStatusCode__c=null, MaritalStatusLabel__c=null, MaritalStatusSystem__c=null, Name__c=Veera Radonctest, Telecom1Use__c=home, Telecom1Value__c=608-999-9654, Telecom2Use__c=null, Telecom2Value__c=null, BirthDate__c=Thu Feb 12 00:00:00 CET 1970}&quot;)]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <set-payload value="#[resultOfScript('fhirPatientJSON')]" mimeType="application/json" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/patients/{patientIDType}/{patientID}" method="PUT" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>


            </http:request-builder>
        </http:request>

        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>


    </munit:test>
    <munit:test name="post:/patients/MRN/123/allergies:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/patients/{patientIDType}/{patientID}/allergies:system-api-config-200-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock the input JSON">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JSON to Object']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('fhirAllergiesJSON')]" mimeType="text/json">
                <mock:invocation-properties>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                </mock:invocation-properties>
            </mock:then-return>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EmrPatient from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EmrPatient from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPatient')]"/>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EmrPractitioner from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EmrPractitioner from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPractitioner')]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Create new EhrAllergyIntolerances'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Create new EhrAllergyIntolerances']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;success&quot;]"/>

        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Strore the input JSON' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Strore the input JSON']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-payload-equals message="Invalid input data!" expectedValue="#[resultOfScript('fhirAllergiesJSON')]" doc:name="Assert Payload"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="Flow variable inputJSON should not be NULL!" condition="#[flowVars.inputJSON != null]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Prepare create of the EhrAllergyIntolerances in SFDC' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Prepare create of the EhrAllergyIntolerances in SFDC']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-true message="Payload should be instance of Map and the resourceType should be 'AllergyIntolerance'!" condition="#[payload instanceof Map &amp;&amp; payload.resourceType.equals(&quot;AllergyIntolerance&quot;)]" doc:name="Assert True"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="The payload should contain one or more records which should be inserted into SFDC instance!" condition="#[payload.size()&gt;0]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <dw:transform-message doc:name="Transform Message to JSON">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/patients/{patientIDType}/{patientID}/allergies" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />

    </munit:test>
    <munit:test name="post:/patients/MRN/123/conditions:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/patients/{patientIDType}/{patientID}/conditions:system-api-config-200-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock the input JSON">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JSON to Object']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('fhirConditionsJSON')]" mimeType="text/json">
                <mock:invocation-properties>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                </mock:invocation-properties>
            </mock:then-return>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EmrPatient from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EmrPatient from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPatient')]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Create new EhrConditions'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Create new EhrConditions']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;success&quot;]"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Transform and store payload into inputJson variable' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform and store payload into inputJson variable']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-payload-equals message="Invalid input data!" expectedValue="#[resultOfScript('fhirConditionsJSON')]" doc:name="Assert Payload"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="Flow variable inputJSON should not be NULL!" condition="#[flowVars.inputJSON != null]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <mock:spy messageProcessor=".*:.*" doc:name="Copy_of_Spy 'Prepare create of the EhrAllergyIntolerances in SFDC' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Prepare create of the EhrAllergyIntolerances in SFDC']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-true message="Payload should be instance of Map and the resourceType should be 'Condition'!" condition="#[payload instanceof Map &amp;&amp; payload.resourceType.equals(&quot;Condition&quot;)]" doc:name="Assert True"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="The payload first record should contain values which should be inserted into SFDC instance!" condition="#[payload.get(0).toString().equals(&quot;{Account__c=TestAcc, AbatementDetail255__c=, AbatementDetail__c=, CodeLabel__c=Appendicitis, CodeSystem__c=http://snomed.info/sct, Code__c=74400008, StatusCode__c=Active, Patient__c=123}&quot;)]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <dw:transform-message doc:name="Transform Message to JSON">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/patients/{patientIDType}/{patientID}/conditions" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />

    </munit:test>
    <munit:test name="put:/patients/MRN/123/conditions:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [put:/patients/{patientIDType}/{patientID}/conditions:system-api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EhrCondition from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EhrCondition from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrCondition')]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EhrPatient from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EhrPatient from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPatient')]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Upsert EhrCondition'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Upsert EhrCondition']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('sfdcResponse')]"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Prepare upsert of the EhrCondition in SFDC' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Prepare upsert of the EhrCondition in SFDC']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-true message="Payload should be instance of Map and the resourceType should be 'Condition'!" condition="#[payload instanceof Map &amp;&amp; payload.resourceType.equals(&quot;Condition&quot;)]" doc:name="Assert True"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-on-equals message="The payload should contain values which should be upserted into SFDC instance!" expectedValue="#[&quot;{Id=456, AbatementDetail255__c=, AbatementDetail__c=, AsserterPatient__c=, AsserterPractitioner__c=, CodeLabel__c=Appendicitis, CodeSystem__c=http://snomed.info/sct, Code__c=74400008, Onset__c=1996-04-27, StatusCode__c=Active, Patient__c=123}&quot;.replaceAll(&quot;\\s&quot;,&quot;&quot;)]" actualValue="#[payload.get(0).toString().replaceAll(&quot;\\s&quot;,&quot;&quot;)]" doc:name="Assert Equals"/>
            </mock:assertions-after-call>
        </mock:spy>
        <set-payload value="#[getResource('condition-fhir-request.json').asString()]" mimeType="application/json" doc:name="Set Payload"/>
        <http:request config-ref="HTTP_Request_Configuration" path="/patients/{patientIDType}/{patientID}/conditions" method="PUT" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientID" value="123"/>
                <http:uri-param paramName="patientIDType" value="MRN"/>
            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string"/>
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200"/>
    </munit:test>
    <munit:test name="post:/patients/MRN/123/encounters:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/patients/{patientIDType}/{patientID}/encounters:system-api-config-200-application/json]" >
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/patients/{patientIDType}/{patientID}/encounters" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#['{&quot;message&quot;:&quot;Notsupportedyet.&quot;}']" actualValue="#[payload.replaceAll(&quot;\\s&quot;,&quot;&quot;)]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="post:/patients/MRN/123/medications:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/patients/{patientIDType}/{patientID}/medications:system-api-config-200-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock the input JSON">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JSON to Object']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('fhirMedicationsJSON')]" mimeType="text/json">
                <mock:invocation-properties>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                </mock:invocation-properties>
            </mock:then-return>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EmrPatient from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EmrPatient from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPatient')]"/>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Create new EhrMedicationPrescriptions'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Create new EhrMedicationPrescriptions']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;success&quot;]"/>

        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Transform and store payload into inputJson variable' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform and store payload into inputJson variable']"/>
            </mock:with-attributes>

            <mock:assertions-before-call>
                <munit:assert-payload-equals message="Invalid input data!" expectedValue="#[resultOfScript('fhirMedicationsJSON')]" doc:name="Assert Payload"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="Flow variable inputJSON should not be NULL!" condition="#[flowVars.inputJSON != null]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <mock:spy doc:name="Spy 'Prepare create of the EhrMedicationPrescriptions in SFDC' transfomation" messageProcessor=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Prepare create of the EhrMedicationPrescriptions in SFDC']"/>
            </mock:with-attributes>

            <mock:assertions-before-call>
                <munit:assert-true condition="#[payload.Id != null]" doc:name="Assert True" message="The EhrPatient Id should not be NULL!"/>
                <munit:assert-true condition="#[payload.Account__c != null]" doc:name="Assert True" message="The EhrPatient Account__c should not be NULL!"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-on-equals message="The payload should contain fields of record which should be inserted into SFDC instance!" expectedValue="#[&quot;TestAcc&quot;]" actualValue="#[payload[0].Account__c]" doc:name="Assert Equals"/>



            </mock:assertions-after-call>
        </mock:spy>
        <dw:transform-message doc:name="Transform Message to JSON">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/patients/{patientIDType}/{patientID}/medications" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />

    </munit:test>
    <munit:test name="post:/patients/MRN/123/observations:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/patients/{patientIDType}/{patientID}/observations:system-api-config-200-application/json]" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock the input JSON">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JSON to Object']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('fhirObservationsJSON')]" mimeType="text/json">
                <mock:invocation-properties>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                    <mock:invocation-property key="Name" value="#[]"/>
                </mock:invocation-properties>
            </mock:then-return>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Get EmrPatient from SFDC'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get EmrPatient from SFDC']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('ehrPatient')]"/>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock 'Create new EhrObservations'">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Create new EhrObservations']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[&quot;success&quot;]"/>

        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Strore the input JSON' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Strore the input JSON']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-payload-equals message="Invalid input data!" expectedValue="#[resultOfScript('fhirObservationsJSON')]" doc:name="Assert Payload"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="Flow variable inputJSON should not be NULL!" condition="#[flowVars.inputJSON != null]" doc:name="Assert True"/>
            </mock:assertions-after-call>
        </mock:spy>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy 'Prepare create of the EhrObservations in SFDC' transformation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Prepare create of the EhrObservations in SFDC']"/>
            </mock:with-attributes>

            <mock:assertions-before-call>
                <munit:assert-true message="Payload should be instance of Map and the resourceType should be 'Observation'!" condition="#[payload instanceof Map &amp;&amp; payload.resourceType.equals(&quot;Observation&quot;)]" doc:name="Assert True"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <munit:assert-true message="The payload should contain fields of record which should be inserted into SFDC instance!" condition="#[&quot;TestAcc&quot;.equals(payload[0].Account__c) &amp;&amp; &quot;86021&quot;.equals(payload[0].NameCode__c)]" doc:name="Assert True"/>



            </mock:assertions-after-call>
        </mock:spy>
        <dw:transform-message doc:name="Transform Message to JSON">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
}]]></dw:set-payload>
        </dw:transform-message>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/patients/{patientIDType}/{patientID}/observations" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />

    </munit:test>
    <munit:test name="post:/patients/MRN/123/scheduling:system-api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/patients/{patientIDType}/{patientID}/scheduling:system-api-config-200-application/json]" >
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/patients/{patientIDType}/{patientID}/scheduling" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="patientIDType" value="MRN"/>
                <http:uri-param paramName="patientID" value="123"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#['{&quot;message&quot;:&quot;Notsupportedyet.&quot;}']" actualValue="#[payload.replaceAll(&quot;\\s&quot;,&quot;&quot;)]" doc:name="assert that - payload is as expected" />
    </munit:test>
</mule>
